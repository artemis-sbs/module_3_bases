#
# This is a port of the Module 3 bases from Artemis SBS 2.x
# It attempts to translate it as close as possible
# It does not necessarily use the best practices for Artemis Cosmos
# It is intended to give Artemis SBS scripters something familiar 
# To start with and build from there


#
#
# This script will spawn the player ships
# Setting this value it wil NOT spawn 
# See below example of how to use both the default ships
# Or completely creating your own
#
PLAYER_CREATE_DEFAULT = False
#
#
#
PLAYER_COUNT = 1


#
#  This script will use two sides good_side and bad_side
#  It intentionally is not using tsn or raiders to sus out any errors in not using those
good_side_value = "good_side"
bad_side_value = "bad_side"

shared GAMEMASTER_INSTRUCTIONS = """
This GM mission script is designed to place one player ship and 3 bases in a sector, and lets the GM add enemies or terrain.

Left-click to select a ship or station (white target box).
Right-click to select a location in space (blue target box).
Many menu commands require you to select an object or location first.

Note Hot keys do not work currently


1- add small enemy at selected point
2- add medium enemy at selected point
3- add large enemy at selected point
4- add small elite at selected point
5- add medium elite enemy at selected point
6- add large elite enemy at selected point

0- delete selected object
r- remove unnamed objects near selected point

m- add minefield 
n- add nebulae
a- add asteroids

z- teleport selected object to selected point

b- enemy only cares about stations
c- enemy only cares about players
t- add transport heading north
y- add transport heading east
u- add enemy transport heading east

This was script written by Doug Reichard based on the original written by Thom Robertson

END"""


##  <create type="player" player_slot="0" x="50000" y="0" z="50000" />
//shared/signal/create_player_ships
    if PLAYER_CREATE_DEFAULT:
        # Use settings ship, but stt its position
        PLAYER_LIST[0].pos = Vec3(50000,0,50000)
    else:
        # Script creates the player ships
        #
        player = player_spawn(50000, 0, 50000, "Artemis", good_side_value, "tsn_light_cruiser")
    task_schedule(gm_setup_docking)
    ->END

=== gm_setup_docking        
#
#  Call this if you add players or stations
#  e.g. task_schedule(gm_setup_docking)
#
##
## This sets up docking with stations
## Good news you can script how docking
## bad news you have to remember to set its up
    for player_id in role("__player__"):
        player = to_object(player_id)
        continue if player is None
## This sets the docking logic between two things to a MAST label
## In this case "docking_dock_with_friendly_station"
## which is defined in the docking add on
## But new ones can be defined
        docking_set_docking_logic(player_id, role(player.side) & role("station"), docking_dock_with_friendly_station)
    ->END



@map/module_3_bases "Module 3 bases"
" This is a basic Game Master module with one player ship protecting three friendly bases. This mission requires another player using the Game Master client to create interesting situations for the other players.

### <create type="station" x="15000" y="0" z="50000" name="DS1" hullID="1000" sideValue="2" />
    npc_spawn(15000,0,50000, "DS 1", good_side_value, "starbase_command", "behav_station" )
### <create type="station" x="20000" y="0" z="30000" name="DS2" hullID="1000" sideValue="2" />
    npc_spawn(20000,0,30000, "DS 2", good_side_value, "starbase_command", "behav_station" )
### <create type="station" x="15000" y="0" z="70000" name="DS3" hullID="1000" sideValue="2" />
    npc_spawn(15000,0,70000, "DS 3", good_side_value, "starbase_command", "behav_station" )
#
#
# This is new to cosmos
#   To see the sensors of other things like stations
#   they need to be part of the extra_scan_sources
#   this code set this up. An extra step, but it has 
#   a lot of benefits as you have control over this
#
## Get a list of player ships
## the role function is a way to quickly retrieve
## a set of IDs quickly
## to_object_list converts the IDs to a list of objects
    player_ships = to_object_list(role("__player__") | role("gamemaster"))
## Loop through the list player ships and gamemaster 
    for player_ship in player_ships:
## Get the stations on the players side
## notice role is used twice
## returning two sets, and then it geth the intersection of those sets
        side = player_ship.side
        stations_friendly = to_object_list(role(side)  & role("station"))
## Add a link for the extra_scan_source
## The system uses this link to update the scan sources        
## a script can link and link the sources
        link(player_ship, "extra_scan_source", stations_friendly)


    
# <set_gm_button text="Teleport Selection [Z]" x="30" y="200" h="30" w="200" />
//comms if has_roles(COMMS_ORIGIN_ID, 'gamemaster')
    + "Create Enemy" //comms/create/enemy
    + "Delete" //comms/delete
    + "Create Transport" //comms/create/transport
    + "Teleport selection":
        gm_pos = gamemaster_get_pos(COMMS_ORIGIN_ID, "rmb")        
        -> END if gm_pos is None
## Make sure selected object still exists            
        obj = to_object(COMMS_SELECTED_ID)
        -> END if obj is None
## Set the object to the order marker        
        obj.pos = gm_pos



# This is coded to show how to disable a button
# The Enamy brain only shows a bad side  is selected
    + "Enemy Brain" //comms/enemy_brain if has_role(COMMS_SELECTED_ID, bad_side_value)


# <set_gm_button text="Create Enemy/Small Standard [1]" menu_w="150" />
# <set_gm_button text="Create Enemy/Medium Standard [2]" />
# <set_gm_button text="Create Enemy/Large Standard [3]" />
# <set_gm_button text="Create Enemy/Small Skaraan [4]" />
# <set_gm_button text="Create Enemy/Medium Skaraan [5]" />
# <set_gm_button text="Create Enemy/Large Skaraan [6]" />

//comms/create/enemy if has_role(COMMS_ORIGIN_ID, "gamemaster")
    + ^1 "Back" //comms/
    + "Extras" //comms/create_enemy/extras
    + "Small Standard [1]" gm_create_enemy {"ORIGIN_ID": COMMS_ORIGIN_ID, "use_side": bad_side_value, "size": "light" }
    + "Medium Standard [2]" gm_create_enemy {"ORIGIN_ID": COMMS_ORIGIN_ID, "use_side": bad_side_value, "size": "medium" }
    + "Large Standard [3]" gm_create_enemy {"ORIGIN_ID": COMMS_ORIGIN_ID, "use_side": bad_side_value, "size": "heavy" }
## Note: As of this writing there are errors
## in ship data json with skaraan having the wrong size
## The code assumes this will be fixed
    + "Small Skaraan [4]" gm_create_enemy {"ORIGIN_ID": COMMS_ORIGIN_ID, "use_side": bad_side_value, "size": "light", "origin": "skaraan" }
    + "Medium Skaraan [5]" gm_create_enemy {"ORIGIN_ID": COMMS_ORIGIN_ID, "use_side": bad_side_value, "size": "medium", "origin": "skaraan" }
    + "Large Skaraan [6]" gm_create_enemy {"ORIGIN_ID": COMMS_ORIGIN_ID, "use_side": bad_side_value, "size": "heavy", "origin": "skaraan" }
    


# <set_gm_button text="Create Enemy/Extras/Minefield Arc [M]" />
# <set_gm_button text="Create Enemy/Extras/Nebulae [N]" />
# <set_gm_button text="Create Enemy/Extras/Asteroids [A]" />

//comms/create_enemy/extras if has_role(COMMS_ORIGIN_ID, "gamemaster")
    + ^1 "Back" //comms/
    + "Minefile Arc [M]" gm_create_mine_arc {"ORIGIN_ID": COMMS_ORIGIN_ID }
    + "Nebulae [N]" gm_create_nebula {"ORIGIN_ID": COMMS_ORIGIN_ID }
    + "Asteroids [A]" gm_create_asteroids {"ORIGIN_ID": COMMS_ORIGIN_ID }


# <set_gm_button text="Create Transport/Heading North [T]" />
# <set_gm_button text="Create Transport/Heading East [Y]" />
# <set_gm_button text="Create Transport/Enemy Heading East [U]" />
//comms/create/transport if has_role(COMMS_ORIGIN_ID, "gamemaster")
    + ^1 "Back" //comms/
    + "Heading North [T]" gm_create_transport {"ORIGIN_ID": COMMS_ORIGIN_ID, "use_side": good_side_value, "target_offset": Vec3(0,0,100000) }
    + "Heading East [Y]" gm_create_transport {"ORIGIN_ID": COMMS_ORIGIN_ID, "use_side": good_side_value, "target_offset": Vec3(100000, 0,0) }
    + "Enemy Heading East [U]" gm_create_transport {"ORIGIN_ID": COMMS_ORIGIN_ID, "use_side": bad_side_value, "target_offset": Vec3(100000, 0,0) }


    
# <set_gm_button text="Enemy Brain/Chase Stations [B]" />
# <set_gm_button text="Enemy Brain/Chase Player [C]" />
//comms/enemy_brain if has_role(COMMS_ORIGIN_ID, "gamemaster")
    + ^1 "Back" //comms/
    + "Chase Station [B]":
        yield fail if to_object(COMMS_SELECTED_ID) is None
# NOTE: Adding to a brain is in reverse order of 2.x
# this is because brains are much more flexible
# They use a behavior tree instead of a stack
# Also, since Space is bigger you need to set the size
# you can specify a SIZE_X and a SIZE_Z that are different i.e. a rectangle
# SIZE_X defaults to None which means anywhere
# SIZE_Z defaults to SIZE_X if not supplied
        brain_clear(COMMS_SELECTED_ID)
# Chase player within 3000        
        brain_add(COMMS_SELECTED_ID, ai_chase_player, {"SIZE_X": 3000})
# Otherwise chase a station within 100,000
        brain_add(COMMS_SELECTED_ID, ai_chase_station, {"SIZE_X": 100_000})
# Otherwise chase any player   
        brain_add(COMMS_SELECTED_ID, ai_chase_player)
    + "Chase Player [C]":
        yield fail if to_object(COMMS_SELECTED_ID) is None
        brain_clear(COMMS_SELECTED_ID)
        brain_add(COMMS_SELECTED_ID, ai_chase_player)
        

# <set_gm_button text="Delete\Selected ship [0]" />
# <set_gm_button text="Delete\Non-Ships Near [R]" />
//comms/delete if has_role(COMMS_ORIGIN_ID, "gamemaster")
    + ^1 "Back" //comms/
## This is to demonstrate now showing delete    
    + "Selected ship [B]" if COMMS_SELECTED_ID != COMMS_ORIGIN_ID and COMMS_SELECTED_ID != 0:
## This is a inline block selecting this button runs this instead of a label
        delete_object(COMMS_SELECTED_ID)
        
    + "Non-ships near [B]":
        gm_pos = gamemaster_get_pos(COMMS_ORIGIN_ID, "lmb")
# delete_object_box, delete_object_sphere 
#   can be quite powerful using the right arguments
## The tick_type help specify a set of objects
## TERRAIN = 0x01,
## NPC = 0x10,
## PLAYER = 0x20,
## ALL = 0xffff,
## NPC_AND_PLAYER = 0x30,
## DEFAULT is 0xFFF0
        tick_type = 0x0F # all static objects: e.g. nebula, asteroids
        delete_objects_box(*gm_pos, 5000,5000,5000, tick_type)
## delete_objects_box could also take roles
##  Like delete nebula and stations
##   delete_objects_box(*gm_box, 5000,5000,5000, 0xffff, "nebula, station")



### <create count="50" type="asteroids" use_gm_position="yes" radius="5000" randomRange="3000" />
=== gm_create_asteroids
## Get the game master position
    gm_pos = gamemaster_get_pos(ORIGIN_ID, "lmb")
## Scatter generator functions are used to generate random point
## this scatter fills a ring
    clusters = scatter_sphere(50, gm_pos.x,gm_pos.y,gm_pos.z, 5000, ring=True)
    terrain_spawn_asteroid_scatter(clusters, 1000)
    -> END

## <create count="30" type="nebulas" use_gm_position="yes" radius="5000" randomRange="3000" />
=== gm_create_nebula
## Get the game master position
    gm_pos = gamemaster_get_pos(ORIGIN_ID, "lmb")
## Scatter generator functions are used to generate random point
## this scatter fills a ring
    clusters = scatter_sphere(30, gm_pos.x,gm_pos.y,gm_pos.z, 5000, ring=True)
    terrain_spawn_nebula_scatter(clusters, 1000)
    -> END

## <create count="50" type="mines" startAngle="230" endAngle="310" use_gm_position="yes" radius="10000" />
=== gm_create_mine_arc
## Get the game master position
    gm_pos = gamemaster_get_pos(ORIGIN_ID, "lmb")
## Scatter generator functions are used to generate random point
    points = scatter_arc(50, gm_pos.x,gm_pos.y,gm_pos.z, 10000, start=230, end=310)
    for pos in points:
        mine_obj = terrain_spawn( pos.x, pos.y, pos.z,None, None, "danger_1a", "behav_mine")
        mine_obj.blob.set("damage_done", 5)
        mine_obj.blob.set("blast_radius", 1000)
        mine_obj.engine_object.blink_state = -5
    ->END

=== gm_create_transport
# default will create the variable the using the value once
# if the variable already exists it does not reset it    
    default shared transport_count = 0
    gm_pos = gamemaster_get_pos(ORIGIN_ID, "lmb")
# This time the *gm_pos syntax is used
# This is called "unpacking"
# "*gm_pos" is the same as typing  "gm_pos.x, gm_pos.y, gm_pos.z,"
#
    t = npc_spawn(*gm_pos, f"TRN {transport_count}", use_side, "transport_ship", "behav_npcship" )
    t = to_object(t)
# This makes sure the transport was created    
# If not end this task
    ->END if t is None 
#   set a target position using the offset passed in
    pos = Vec3(t.pos)
    pos += target_offset
    target_pos(t, *pos)
# This lets the game master see the ship
# This should be used sparingly
# But is here for example purposes
    link(ORIGIN_ID, "extra_scan_source", t)
    ->END

=== gm_create_enemy
    # Expecting certain variables
    -> END if not are_variables_defined("ORIGIN_ID,use_side")
    default shared size = "light" # default to light if not supplied
    default origin = None # default to None if not supplied

    gm_pos = gamemaster_get_pos(ORIGIN_ID, "lmb")

## Filter ship data lets the script query the ship data

    ship_keys = ship_data_filter_ship_data_by_side(None, origin, size, True)
# Work around skaraan data error and make sure there are ships to pick
    if len(ship_keys)==0:
        ship_keys = ship_data_skaraan_ship_keys()
## This includes tsn
## Lets exclude tsn, you can decide to include tsn
    ship_keys = [x for x in ship_keys if "tsn" not in x]
    ->END if len(ship_keys)==0
# create a ship from a random selection of th ships    
    ship_key = random.choice(ship_keys)
    ship = npc_spawn(*gm_pos,f"", use_side,ship_key,"behav_npcship")
    link(ORIGIN_ID, "extra_scan_source", ship)
# Set Brain
    brain_clear(ship)
## Chase player within 3000        
    brain_add(ship, ai_chase_player, {"SIZE_X": 3000})
## Otherwise chase a station within 100,000
    brain_add(ship, ai_chase_station, {"SIZE_X": 100_000})
## Otherwise chase any player   
    brain_add(ship, ai_chase_player)

    
    ->END
